// LPL's language / interpreter definition for JavaCup

import java_cup.runtime.*;

action code {: 


/**** interpStm ****/

/* This method a takes member of the statement class s
and a current table t and returns the table updated by s
(although some statements such as 'print' may not update the table).
It branches depending on what is the outermost constructor of s:
-If s is a print, it calls the method printList
with the list of expressions as first arg, and the current
table as second.  Print does NOT change the table.
-If s is an assignment, it returns the table value of the method
`update' when called with the current table, the assignment's
LHS, and the value of the RHS calcuated in the current table 
(note evaluating the RHS itself can't change the current table).
-If s is one statement s1 following by another s2, s2 is interpreted
in the table got by interpreting s1 in the current table t.
otherwise we have an error.  
-If s is a repeat statement, it returns the table after the
repeat's statements have been executed one or more times */

 Table interpStm(Stm s, FuncList fs, Table t) {
   if (s instanceof PrintStm)  
     {  printList(s.getExps(), t);
        return t;
     }
   else if (s instanceof AssignStm) {
        if (inTable(t, s.getLHS())) return update(t,s.getLHS(),interpExp(s.getRHS(), t));
        else System.out.println("ERROR: Using undeclared variable");
        return t; }
   else if (s instanceof CompoundStm)
        return interpStm(s.get2(), fs, interpStm(s.get1(),fs,t));
   else if (s instanceof CallStm)
        return interpStm(getFuncStms(s.getName(), fs), fs, t);
   else if (s instanceof RepeatStm) {
        /* first change table to simulate execution of stms inside repeat.. */
        Table table_temp = interpStm(s.getRepStm(),fs,t);
        /* find value of e in new table.. */
        int   int_temp = interpExp(s.getRepExp(),table_temp);
        /* call statements again if expression is non-zero */
        if (int_temp == 0) return table_temp; else
        return interpStm(s, fs, table_temp); }
   else if (s instanceof SelectionStm) {
        int temp = interpExp(s.getSelectionExp(), t);
        if (temp==0) { return t; }
        else { return interpStm(s.getSelectionStm(), fs, t); } }
   else if (s instanceof DecStm) {
        return update(t, s.getDecId(), 0); }
   else
        System.out.println("error in stm");
        return t;
  }

/**** interpExp ****/

/* interpExp takes an expression e and a table t and returns the
value of e within the context of t.
-If e is a number return that number.
-If e is an identifier, return the looked up value of id in table t.
-If e is a binary operator expression:
  get the value of the left expression and
  get the value of the right expression 
 return the value of the right and left expressions
 operated on by whatever binary operator we have.
otherwise we have an error */

 int interpExp(Exp e, Table t) {
  if (e instanceof NumExp) 
       return e.getInt();
  else if (e instanceof IdExp)
       return lookup(t,e.geteid());
  else if (e instanceof OpExp)
         {
            int   i_temp1 = interpExp(e.getleft(),t);
            int   i_temp2 = interpExp(e.getright(),t);
          if (e.getoper() == 1) 
           return (i_temp1+i_temp2); 
          else if (e.getoper() == 2) 
           return (i_temp1 - i_temp2); 
          else if (e.getoper() == 3) 
           return (i_temp1 * i_temp2); 
          else if (e.getoper() == 4) 
           return (i_temp1 / i_temp2); 
          else if (e.getoper() == 5 && i_temp1 > i_temp2) 
           return (1); 
          else if (e.getoper() == 5 && i_temp1 == i_temp2) 
           return (0); 
          else if (e.getoper() == 5 && i_temp1 < i_temp2) 
           return (0); 
          else throw new Error("error in Exp");
        }
  else throw new Error("Exp not recognised");
  }

/**** update ****/

/* constructor for a Table that implements the table
-- it simply adds the pair str, i to the old table t,
where str is the identifier and i the int value. */


 Table update(Table t,String str, int i) {
  return (new Table(str, i, t));}

/* selector for a Table - returns the integer value
associated with key once its found */


 int lookup(Table t, String key) {
  if (key.equals(t.getid())) return t.getint();
  else return lookup(t.gettail(),key);
  }

  boolean inTable(Table t, String key) {
    if (key.equals(t.getid())) return true;
    else if (t.gettail() == null) return false;
    else return inTable(t.gettail(), key);
  }

  Stm getFuncStms(String name, FuncList fs) {
    if (fs.getName().equals(name)) return fs.getStm();
    else return getFuncStms(name, fs.getTail());
  }


/* This class represents the Store of the program */

class Table {
  String id; int value; Table tail;
  Table(String i, int v, Table t)  {id =i; value=v; tail=t;}

  public String getid() {return id;}
  public int getint() {return value;}
  public Table gettail() {return tail;}
}


void  printList(ExpList expL, Table t) {
  if (expL instanceof PairExpList) 
     { 
       System.out.print(interpExp(expL.gethead(),t));
       System.out.print(" ");
       printList(  expL.gettail(), t );
      }
   else 
      /* exp is LastExpList */
              System.out.println(interpExp(expL.gethead(),t));
  }

/* The following classes represent the syntax classes of
   the language. They have constructirs and accesssors */

abstract class Stm { 
   protected ExpList getExps() {return null;}; 
   protected Stm get1() {return null;};
   protected Stm get2() {return null;};
   protected Exp getRHS() {return null;};
   protected String getLHS() {return null;};
   protected Stm getRepStm() {return null;};
   protected Exp getRepExp() {return null;};
   protected Stm getSelectionStm() { return null; }
   protected Exp getSelectionExp() { return null; }
   protected String getDecId() { return null; }
   protected String getName() { return null; }
}

class CompoundStm extends Stm {
   Stm stm1, stm2;
   CompoundStm(Stm s1, Stm s2) {stm1=s1; stm2=s2;}

   public Stm get1() {return stm1;}
   public Stm get2() {return stm2;}
}

class CallStm extends Stm {
    String name;
    CallStm(String n) {name =n; }
    public String getName() { return name; }
}

class AssignStm extends Stm {
   String id; Exp exp;
   AssignStm(String i, Exp e) {id=i; exp=e;}
   
   public Exp getRHS() {return exp;}
   public String getLHS() {return id;}
}

class PrintStm extends Stm {
   ExpList exps;
   PrintStm(ExpList e) {exps=e;}

   public ExpList getExps() {return exps;}
}
class RepeatStm extends Stm {
   Stm s; Exp exp;
   RepeatStm(Stm a, Exp e) {s=a; exp=e;}

   public Stm getRepStm() {return s;}
   public Exp getRepExp() {return exp;} 
}

class SelectionStm extends Stm {
    Stm s; Exp exp;
    SelectionStm(Stm a, Exp e) { s=a; exp=e; }

    public Stm getSelectionStm() { return s; }
    public Exp getSelectionExp() { return exp; }
}

class DecStm extends Stm {
    String id;
    DecStm(String i) { id=i; }

    public String getDecId() { return id; }
}

abstract class Exp {
   protected int getInt() { return 0;};
   protected String geteid() {return null;};
   protected Stm getStm()   {return null;}; 
   protected Exp getExp() {return null;};
   protected int getoper() {return 0;}
   protected Exp getleft() {return null;}
   protected Exp getright() {return null;}

   }

class IdExp extends Exp {
   String id;
   IdExp(String i) {id=i;}
   public String geteid() {return id;}  
}

class NumExp extends Exp {
   int num;
   NumExp(int n) {num=n;}
   public int getInt() {return num;}
}

class OpExp extends Exp {
   Exp left, right; int oper;
   final static int Plus=1,Minus=2,Times=3,Div=4,Gthan=5;
   OpExp(Exp l, int o, Exp r) {left=l; oper=o; right=r;}
   public int getoper() {return oper;}
   public Exp getleft() {return left;}
   public Exp getright() {return right;}
}

abstract class ExpList { 
   abstract Exp gethead() ;
   protected ExpList gettail() {return null;};
}

class PairExpList extends ExpList {
   Exp head; ExpList tail;
   PairExpList(Exp h, ExpList t) {head=h; tail=t;}

   public ExpList gettail() {return tail;}
   public Exp gethead() {return head;}
}

class LastExpList extends ExpList {
   Exp head; 
   LastExpList(Exp h) {head=h;}

   public Exp gethead() {return head;}
}

class FuncList {
    String name;
    Stm stm;
    FuncList tail;

    FuncList(String n, Stm s, FuncList t) { name=n; stm=s; tail=t; }

    String getName() { return name; }
    Stm getStm() { return stm; }
    FuncList getTail() { return tail; }
}
            :} ;

parser code {:
  public static void main(String args[]) throws java.io.IOException {
   parser parser_obj = new parser();
   Symbol parse_tree = null;
   try { parse_tree = parser_obj.parse(); }
   catch (Throwable e) {        e.printStackTrace();
        throw new Error(e.toString());
 };
}
        :};


init with {: scanner.init();              :};
scan with {: return scanner.next_token(); :};

terminal           VARDEC, DO, WHILE, IF, THEN, SEMI, PLUS, MINUS, TIMES, DIVIDE, GT, CALL;
terminal           LPAREN, RPAREN, ASSIGNS, PRINT, COMMA, START, FUNCTION, END, FINISH;
terminal String    ID, FUNCNAME;
terminal Integer   INT;

/* Non terminals .. if they have a RESULT then
this result must be typed... */
non terminal Stm stm; 
non terminal Stm single_stm; 
non terminal Table prog;
non terminal FuncList func;
non terminal FuncList single_func;
non terminal ExpList exps;
non terminal Exp exp;

/* Precedences */
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence left GT;

start with prog;

/* The grammar */

prog ::= START SEMI func:fs stm:s FINISH SEMI
        {: RESULT = interpStm(s,fs,new Table("",0,null)); :}
        ;
prog ::= START SEMI stm:s FINISH SEMI 
        {: RESULT = interpStm(s,null,new Table("",0,null));  :}
        ;
func ::= single_func:f func:fs
        {: RESULT = new FuncList(f.getName(), f.getStm(), fs); :}
        ;

func ::= single_func:s
        {: RESULT = s; :}
        ;

single_func ::= FUNCTION FUNCNAME:name SEMI stm:s END SEMI
        {: RESULT = new FuncList(name, s, null); :}
        ;

stm::= single_stm:s1 stm:s2
        {: RESULT = new CompoundStm(s1,s2); :} 
         ;
stm::= single_stm:s1
        {: RESULT = s1; :}
         ;
single_stm ::=
        CALL FUNCNAME:f SEMI
        {: RESULT = new CallStm(f); :}
         |
       ID:id ASSIGNS exp:e SEMI
        {: RESULT = new AssignStm(id,e); :}
         |
       DO stm:s1 WHILE exp:e SEMI
        {: RESULT = new RepeatStm(s1,e); :}
         |
       IF exp:e THEN LPAREN stm:s RPAREN SEMI
        {: RESULT = new SelectionStm(s, e); :}
         |
       VARDEC ID:id SEMI
        {: RESULT = new DecStm(id); :}
         |
       PRINT LPAREN exps:es RPAREN  SEMI
        {: RESULT = new PrintStm(es); :}
           ;

exps ::= exp:e
       {: RESULT = new LastExpList(e); :}  
          |
       exp:e COMMA exps:es
       {: RESULT = new PairExpList(e,es); :}  ;

exp      ::= INT:n                 
	      {: RESULT = new NumExp(n.intValue()); :} 
	      | 
              ID:id {:RESULT = new IdExp(id);:}
              |
              exp:e1 PLUS exp:e2    
	      {: RESULT = new OpExp(e1,OpExp.Plus,e2); :} 
	      | 
              exp:e1 MINUS exp:e2    
	      {: RESULT = new OpExp(e1,OpExp.Minus,e2); :} 
	      | 
              exp:e1 TIMES exp:e2 
	      {: RESULT = new OpExp(e1,OpExp.Times,e2); :} 
	      | 
              exp:e1 DIVIDE exp:e2 
	      {: RESULT = new OpExp(e1,OpExp.Div,e2); :} 
	      | 
             exp:e1 GT exp:e2
              {: RESULT = new OpExp(e1,OpExp.Gthan,e2); :}
              |
              LPAREN exp:e RPAREN     
	      {: RESULT = e; :} 
	      ;
